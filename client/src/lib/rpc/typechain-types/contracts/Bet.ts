/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Bet {
  export type BetDetailsStruct = {
    player1: AddressLike;
    player2: AddressLike;
    amount: BigNumberish;
    resolved: boolean;
    started: boolean;
    startTime: BigNumberish;
    player1Paid: boolean;
    player2Paid: boolean;
  };

  export type BetDetailsStructOutput = [
    player1: string,
    player2: string,
    amount: bigint,
    resolved: boolean,
    started: boolean,
    startTime: bigint,
    player1Paid: boolean,
    player2Paid: boolean
  ] & {
    player1: string;
    player2: string;
    amount: bigint;
    resolved: boolean;
    started: boolean;
    startTime: bigint;
    player1Paid: boolean;
    player2Paid: boolean;
  };
}

export interface BetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "betDetails"
      | "fund"
      | "getBetDetails"
      | "owner"
      | "renounceOwnership"
      | "resolveBet"
      | "startBet"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "betDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBetDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startBet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "betDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBetDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolveBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bet extends BaseContract {
  connect(runner?: ContractRunner | null): Bet;
  waitForDeployment(): Promise<this>;

  interface: BetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  betDetails: TypedContractMethod<
    [],
    [
      [string, string, bigint, boolean, boolean, bigint, boolean, boolean] & {
        player1: string;
        player2: string;
        amount: bigint;
        resolved: boolean;
        started: boolean;
        startTime: bigint;
        player1Paid: boolean;
        player2Paid: boolean;
      }
    ],
    "view"
  >;

  fund: TypedContractMethod<[], [void], "payable">;

  getBetDetails: TypedContractMethod<[], [Bet.BetDetailsStructOutput], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveBet: TypedContractMethod<
    [health1: BigNumberish, health2: BigNumberish],
    [void],
    "nonpayable"
  >;

  startBet: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "betDetails"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, boolean, boolean, bigint, boolean, boolean] & {
        player1: string;
        player2: string;
        amount: bigint;
        resolved: boolean;
        started: boolean;
        startTime: bigint;
        player1Paid: boolean;
        player2Paid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBetDetails"
  ): TypedContractMethod<[], [Bet.BetDetailsStructOutput], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveBet"
  ): TypedContractMethod<
    [health1: BigNumberish, health2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startBet"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
